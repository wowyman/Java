//file main
import java.util.*;
import edu.princeton.cs.algs4.*;
public class Java1
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        QuickUFind u = new QuickUFind(N);
        int count = 0;
        while(!StdIn.isEmpty())
        {
            int p = StdIn.readInt();
            int q = StdIn.readInt();
            if(!u.connected(p,q)) {
                u.union(p, q);
                //StdOut.println(p + " " + q);
            }
            count++;
            if(u.linked_all(N))
            {
                System.out.println(count);
                break;
            }
        }
        if(!u.linked_all(N))
        {
            System.out.println("Faild");
        }
    }
}





//file class QUF


public class QuickUFind {
    private int[] id;
    private int[] sz;
    public QuickUFind(int N) {
        id = new int[N];
        sz = new int[N];
        for (int i = 0; i < N; i++)
        {
            id[i] = i;
            sz[i] = 1;
        }
    }

    public int find(int i)
    {
        while(i != id[i])
        {
            id[i] = id[id[i]];
            i = id[i];
        }
        return i;
    }
    public boolean connected(int p, int q) {
        return find(p) == find(q);
    }
    public void union(int p, int q) {
        int i = find(p);
        int j = find(q);
        if(i == j) return;
        if(sz[i]<sz[j]) { id[i] = j; sz[j] += sz[i]; }
        else            { id[j] = i; sz[i] += sz[j]; }
    }

    public boolean linked_all(int n)
    {
        for (int i=0;i<sz.length;i++) {
            if (sz[i] == n) return true;
        }
        return false;
    }
}
